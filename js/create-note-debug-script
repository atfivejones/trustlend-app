// DEBUG VERSION - Add this JavaScript to create-note.html just before the closing </body> tag

<script>
// Override the existing nextStep function with debugging
function nextStep() {
    console.log('üîç DEBUG: Next Step button clicked!');
    console.log('Current step:', currentStep);
    console.log('Total steps:', totalSteps);
    
    if (currentStep < totalSteps) {
        console.log('üîç Calling validation for step', currentStep);
        
        // Add detailed debugging for Step 1
        if (currentStep === 1) {
            const principal = document.getElementById('principal');
            const loanDate = document.getElementById('loanDate');
            const dueDate = document.getElementById('dueDate');
            const paymentSchedule = document.getElementById('paymentSchedule');
            const numberOfPayments = document.getElementById('numberOfPayments');
            
            console.log('üìä STEP 1 DEBUG INFO:');
            console.log('  Principal element exists:', !!principal);
            console.log('  Principal value:', principal ? principal.value : 'ELEMENT NOT FOUND');
            console.log('  Loan Date element exists:', !!loanDate);
            console.log('  Loan Date value:', loanDate ? loanDate.value : 'ELEMENT NOT FOUND');
            console.log('  Due Date element exists:', !!dueDate);
            console.log('  Due Date value:', dueDate ? dueDate.value : 'ELEMENT NOT FOUND');
            console.log('  Payment Schedule element exists:', !!paymentSchedule);
            console.log('  Payment Schedule value:', paymentSchedule ? paymentSchedule.value : 'ELEMENT NOT FOUND');
            console.log('  Number of Payments element exists:', !!numberOfPayments);
            console.log('  Number of Payments value:', numberOfPayments ? numberOfPayments.value : 'ELEMENT NOT FOUND');
            
            // Test each validation condition
            if (principal && principal.value) {
                const principalNum = parseFloat(principal.value);
                console.log('  Principal as number:', principalNum);
                console.log('  Principal > 0:', principalNum > 0);
            }
            
            if (loanDate && dueDate && loanDate.value && dueDate.value) {
                const loanDateObj = new Date(loanDate.value);
                const dueDateObj = new Date(dueDate.value);
                console.log('  Loan Date object:', loanDateObj);
                console.log('  Due Date object:', dueDateObj);
                console.log('  Due Date > Loan Date:', dueDateObj > loanDateObj);
            }
        }
        
        if (validateCurrentStep()) {
            console.log('‚úÖ Validation passed! Moving to next step.');
            currentStep++;
            updateStepDisplay();
        } else {
            console.log('‚ùå Validation failed - check console for details');
        }
    } else {
        console.log('‚ö†Ô∏è Already at last step');
    }
}

// Add debugging to the button click itself
document.addEventListener('DOMContentLoaded', function() {
    const nextBtn = document.getElementById('next-btn');
    if (nextBtn) {
        nextBtn.addEventListener('click', function(e) {
            console.log('üñ±Ô∏è Next button physically clicked!');
            console.log('Button element:', e.target);
            console.log('Event prevented:', e.defaultPrevented);
        });
    } else {
        console.log('‚ùå Next button not found!');
    }
    
    // Log all form inputs
    const inputs = document.querySelectorAll('input, select');
    console.log('üìù Found', inputs.length, 'form inputs');
    inputs.forEach((input, index) => {
        console.log(`  Input ${index}: id="${input.id}", type="${input.type}", value="${input.value}"`);
    });
});

// Add a simple test button for debugging
function testStepProgression() {
    console.log('üß™ MANUAL TEST - Attempting to force step progression');
    currentStep = 2;
    updateStepDisplay();
    console.log('Forced step to 2');
}

// Add this button to the page for testing
setTimeout(function() {
    const testButton = document.createElement('button');
    testButton.innerHTML = 'üß™ Test Step Progression';
    testButton.onclick = testStepProgression;
    testButton.style.cssText = 'position:fixed; top:10px; right:10px; z-index:9999; background:red; color:white; padding:10px; border:none; border-radius:5px;';
    document.body.appendChild(testButton);
}, 1000);
</script>

<!-- USAGE INSTRUCTIONS:
1. Add this script to the bottom of your create-note.html file (just before </body>)
2. Open the page in your browser
3. Open Developer Tools (F12)
4. Fill in the Step 1 form fields
5. Click "Next Step" 
6. Check the Console tab for detailed debug information
7. You'll see exactly which validation is failing

The red "Test Step Progression" button in the top-right will force progression to step 2 to test if the issue is validation or the step display itself.
-->
